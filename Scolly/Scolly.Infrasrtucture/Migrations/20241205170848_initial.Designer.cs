// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scolly.Infrastructure.Data;

#nullable disable

namespace Scolly.Infrasrtucture.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241205170848_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.AgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AgeGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "5 клас"
                        },
                        new
                        {
                            Id = 2,
                            Name = "6 клас"
                        },
                        new
                        {
                            Id = 3,
                            Name = "7 клас"
                        },
                        new
                        {
                            Id = 4,
                            Name = "5-7 клас"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Children");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Иван",
                            LastName = "Петров",
                            ParentId = 1,
                            PhoneNumber = "0895741239"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Валентина",
                            LastName = "Стратева",
                            ParentId = 2,
                            PhoneNumber = "0895741000"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Мария",
                            LastName = "Стратева",
                            ParentId = 2,
                            PhoneNumber = "0895987987"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Ребека",
                            LastName = "Стратева",
                            ParentId = 2,
                            PhoneNumber = "0895987112"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Димитър",
                            LastName = "Кирилов",
                            ParentId = 4,
                            PhoneNumber = "0895965532"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Емил",
                            LastName = "Кирилов",
                            ParentId = 4,
                            PhoneNumber = "0887951146"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Матилда",
                            LastName = "Кирилова",
                            ParentId = 4,
                            PhoneNumber = "0899915858"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Мартина",
                            LastName = "Петкова",
                            ParentId = 5,
                            PhoneNumber = "0899915333"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Петко",
                            LastName = "Петков",
                            ParentId = 5,
                            PhoneNumber = "0897332255"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Бургас"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Варна"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Велико Търново"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Русе"
                        },
                        new
                        {
                            Id = 6,
                            Name = "София"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Стара Загора"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Благоевград"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Пазарджик"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Плевен"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Хасково"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Сливен"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Шумен"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Добрич"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Кърджали"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Враца"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Монтана"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ловеч"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Перник"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Ямбол"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Кюстендил"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Търговище"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Разград"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Силистра"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Габрово"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Смолян"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Видин"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("CourseTypeId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroupId = 1,
                            CourseTypeId = 2,
                            Description = "Курс по български език и литература за ученици от 5 клас, насочен към подобряване на граматиката и аналитичните умения.",
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 200m,
                            StartDate = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AgeGroupId = 1,
                            CourseTypeId = 2,
                            Description = "Задълбочен курс по български език и литература за 5 клас, с акцент върху подготовката за национални изпити.",
                            EndDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 250m,
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AgeGroupId = 4,
                            CourseTypeId = 5,
                            Description = "Интензивен курс по немски език за ученици от 5 до 7 клас, включващ говорене, слушане и писане.",
                            EndDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 630m,
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AgeGroupId = 1,
                            CourseTypeId = 6,
                            Description = "Курс по френски език за начинаещи ученици от 5 клас, съсредоточен върху основните езикови умения.",
                            EndDate = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 590m,
                            StartDate = new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AgeGroupId = 3,
                            CourseTypeId = 3,
                            Description = "Практически курс по програмиране със C# за ученици от 7 клас, включващ основи на програмирането и реални проекти.",
                            EndDate = new DateTime(2024, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 990m,
                            StartDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.CourseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChildId = 1,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ChildId = 2,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            ChildId = 3,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            ChildId = 4,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            ChildId = 2,
                            CourseId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            ChildId = 5,
                            CourseId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            ChildId = 5,
                            CourseId = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = 8,
                            ChildId = 5,
                            CourseId = 4,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.CourseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Български език и литература"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Програмиране със C#"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Английски език"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Немски език"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Френски език"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "f8ea9f65-046d-47ea-86c6-9e3c7b6b7d2c"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "e174d710-f687-4a09-876c-4a8690d393e5"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "80cae098-d8ab-42e2-bec2-0bb11d0a441e"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "b79f3723-9600-499a-b640-a368f7816b47"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "7e124ab7-6050-49d8-853f-e51897ff536f"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Информатика"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Български език и литература"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Английски език"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Немски език"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Испански език"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Руски език"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Френски език"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "4560faa9-53cd-4adc-8d65-4f7662cd30a7"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "56b171cf-06d6-4943-97d1-63b5d914a348"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "42949812-d05e-46a5-8de6-cb3520319734"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "3d522657-3ef9-4118-9b07-e5cd9bfb8614"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "ca1ee9ab-8832-464f-a197-7e64d8a4e8af"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.TeacherCourse", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TeachersCourses");

                    b.HasData(
                        new
                        {
                            TeacherId = 3,
                            CourseId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            CourseId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            CourseId = 3
                        },
                        new
                        {
                            TeacherId = 5,
                            CourseId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            CourseId = 4
                        },
                        new
                        {
                            TeacherId = 1,
                            CourseId = 5
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.TeacherSpecialty", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("TeachersSpecialties");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            SpecialtyId = 1
                        },
                        new
                        {
                            TeacherId = 1,
                            SpecialtyId = 2
                        },
                        new
                        {
                            TeacherId = 2,
                            SpecialtyId = 4
                        },
                        new
                        {
                            TeacherId = 2,
                            SpecialtyId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            SpecialtyId = 3
                        },
                        new
                        {
                            TeacherId = 3,
                            SpecialtyId = 5
                        },
                        new
                        {
                            TeacherId = 4,
                            SpecialtyId = 6
                        },
                        new
                        {
                            TeacherId = 4,
                            SpecialtyId = 8
                        },
                        new
                        {
                            TeacherId = 5,
                            SpecialtyId = 5
                        },
                        new
                        {
                            TeacherId = 5,
                            SpecialtyId = 6
                        },
                        new
                        {
                            TeacherId = 5,
                            SpecialtyId = 7
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aab83f21-bfce-46dc-b9b5-3fd6dd1d17f0",
                            AccessFailedCount = 0,
                            Address = "Необособен",
                            CityId = 1,
                            ConcurrencyStamp = "b9b7e667-9105-4b12-8fca-90c519fc730c",
                            Email = "admin@admin.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            MiddleName = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG4r2kppC8VE1RkJDE5481qh/EP3Cqcna/i1RVRkafZe53r5Tv7DEiz+dCRaH0m4uQ==",
                            PhoneNumber = "0812345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3579a95d-2697-4d1a-bbe0-02f71c3f15aa",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "4560faa9-53cd-4adc-8d65-4f7662cd30a7",
                            AccessFailedCount = 0,
                            Address = "ул. 'Никола Габровски' 15А",
                            CityId = 3,
                            ConcurrencyStamp = "db2b2732-959f-4445-80e6-e3ee8fdd9228",
                            Email = "teacher1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Николай",
                            LastName = "Николов",
                            LockoutEnabled = false,
                            MiddleName = "Иванов",
                            NormalizedEmail = "TEACHER1@GMAIL.COM",
                            NormalizedUserName = "TEACHER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP+Gi0Q5fEkRSXOaosqJlYTj3T1IXt+wxvEsWlCN1G+K/y+EjAVFVEdmYQ36kPYM1Q==",
                            PhoneNumber = "0884672591",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90489695-e22d-4cd1-b86b-ae63caf46d6d",
                            TwoFactorEnabled = false,
                            UserName = "teacher1@gmail.com"
                        },
                        new
                        {
                            Id = "56b171cf-06d6-4943-97d1-63b5d914a348",
                            AccessFailedCount = 0,
                            Address = "ул. 'Стоян Коледаров' 6",
                            CityId = 2,
                            ConcurrencyStamp = "7ea9f648-c311-4eed-b835-a8c16d828718",
                            Email = "teacher2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Преслав",
                            LastName = "Калоянов",
                            LockoutEnabled = false,
                            MiddleName = "Николаев",
                            NormalizedEmail = "TEACHER2@GMAIL.COM",
                            NormalizedUserName = "TEACHER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBoJ80Qf2i35L3lZI9FQO4GMKIaqcoTNOlVOin0MzvxiGuANuwYNl5QumQWjizCqzQ==",
                            PhoneNumber = "0888967530",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1590d19-5814-4c0e-b843-c1dad569989f",
                            TwoFactorEnabled = false,
                            UserName = "teacher2@gmail.com"
                        },
                        new
                        {
                            Id = "42949812-d05e-46a5-8de6-cb3520319734",
                            AccessFailedCount = 0,
                            Address = "ул. 'Мусала' 12",
                            CityId = 2,
                            ConcurrencyStamp = "fdd1e236-2bf6-43e6-a378-0505bdf423d7",
                            Email = "teacher3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Мария",
                            LastName = "Димитрова",
                            LockoutEnabled = false,
                            MiddleName = "Атанасова",
                            NormalizedEmail = "TEACHER3@GMAIL.COM",
                            NormalizedUserName = "TEACHER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAv8mGhORvqPp2qy3m8lfgtt9D1EJvH3VJVqM57goKAsO7PLFyC5Pr1YUqoRFoH+oQ==",
                            PhoneNumber = "0899745867",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b01965f9-ccbf-43fd-889a-67daf45b7815",
                            TwoFactorEnabled = false,
                            UserName = "teacher3@gmail.com"
                        },
                        new
                        {
                            Id = "3d522657-3ef9-4118-9b07-e5cd9bfb8614",
                            AccessFailedCount = 0,
                            Address = "ул. 'Васил Левски' 155А",
                            CityId = 4,
                            ConcurrencyStamp = "371cc85a-f343-4775-8d47-5da64c1ad017",
                            Email = "teacher4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Виктор",
                            LastName = "Стефанов",
                            LockoutEnabled = false,
                            MiddleName = "Петров",
                            NormalizedEmail = "TEACHER4@GMAIL.COM",
                            NormalizedUserName = "TEACHER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEArM/WQfyvYr42aVoD1HyG6QziGzvyMhQCpC1bksBLipCPEzqKmGgGwoA1ZaWXsszw==",
                            PhoneNumber = "0899745997",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5fd59b2f-08a7-4c80-b09a-d74bf316a774",
                            TwoFactorEnabled = false,
                            UserName = "teacher4@gmail.com"
                        },
                        new
                        {
                            Id = "ca1ee9ab-8832-464f-a197-7e64d8a4e8af",
                            AccessFailedCount = 0,
                            Address = "ул. 'Александър Малинов' 33",
                            CityId = 5,
                            ConcurrencyStamp = "b926f073-4811-4785-83f7-4724ebf6d1f2",
                            Email = "teacher5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Емил",
                            LastName = "Долчинков",
                            LockoutEnabled = false,
                            MiddleName = "Давидов",
                            NormalizedEmail = "TEACHER5@GMAIL.COM",
                            NormalizedUserName = "TEACHER5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECic+tf7Y6yiZNPyqqSRM68EZQOHeev8quFDD2rHbviuCAp4xDkGdf4qusFo325kcg==",
                            PhoneNumber = "0899745000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df109332-4afb-4646-826a-11aaeb31b75b",
                            TwoFactorEnabled = false,
                            UserName = "teacher5@gmail.com"
                        },
                        new
                        {
                            Id = "f8ea9f65-046d-47ea-86c6-9e3c7b6b7d2c",
                            AccessFailedCount = 0,
                            Address = "ул. 'Опълченска' 3А",
                            CityId = 3,
                            ConcurrencyStamp = "c410a5ed-ec1c-4695-b47d-2897c2d5f4a3",
                            Email = "parent1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Петър",
                            LastName = "Петров",
                            LockoutEnabled = false,
                            MiddleName = "Иванов",
                            NormalizedEmail = "PARENT1@GMAIL.COM",
                            NormalizedUserName = "PARENT1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECtpRDYEWP3A4qbc9xSDcHMx/hsytElCdHk3x8WdUHy0B2n/II3MR580YVPn1EIpPA==",
                            PhoneNumber = "0859989615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33a14e35-4fe8-42ed-8332-4a04653c7483",
                            TwoFactorEnabled = false,
                            UserName = "parent1@gmail.com"
                        },
                        new
                        {
                            Id = "e174d710-f687-4a09-876c-4a8690d393e5",
                            AccessFailedCount = 0,
                            Address = "ул. 'Стоян Коледаров' 3А",
                            CityId = 1,
                            ConcurrencyStamp = "d100404d-228d-4c32-8059-1645b2950ae6",
                            Email = "parent2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Александър",
                            LastName = "Стратиев",
                            LockoutEnabled = false,
                            MiddleName = "Иванов",
                            NormalizedEmail = "PARENT2@GMAIL.COM",
                            NormalizedUserName = "PARENT2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH0TknGHpd+Z5pHbKz4f73Rmf6NO08SomDLrzGLFyWv4uwpWjgKZc+UYzUdLulUaaA==",
                            PhoneNumber = "0854700615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9af974fc-1d83-496b-9e04-7786d60e47de",
                            TwoFactorEnabled = false,
                            UserName = "parent2@gmail.com"
                        },
                        new
                        {
                            Id = "80cae098-d8ab-42e2-bec2-0bb11d0a441e",
                            AccessFailedCount = 0,
                            Address = "ул. 'Петя Дубарова' 16Б",
                            CityId = 6,
                            ConcurrencyStamp = "d24827ae-50ef-4293-813d-fdef3088f2f4",
                            Email = "parent3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Виктория",
                            LastName = "Ангелова",
                            LockoutEnabled = false,
                            MiddleName = "Николаева",
                            NormalizedEmail = "PARENT3@GMAIL.COM",
                            NormalizedUserName = "PARENT3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMjkeF41iL5WiP3ArrJ1qAFKKjMpaZ6ug9Zrt2oukG5tipydQTUzFnblYxogASjoKQ==",
                            PhoneNumber = "0854789615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bc8cebb-237c-41b1-a784-f147becbdadd",
                            TwoFactorEnabled = false,
                            UserName = "parent3@gmail.com"
                        },
                        new
                        {
                            Id = "b79f3723-9600-499a-b640-a368f7816b47",
                            AccessFailedCount = 0,
                            Address = "ул. 'Освобождение' 3Б",
                            CityId = 4,
                            ConcurrencyStamp = "853bf44b-9d6c-446e-b8cf-719e31f2d105",
                            Email = "parent4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Девора",
                            LastName = "Кирилова",
                            LockoutEnabled = false,
                            MiddleName = "Кирилова",
                            NormalizedEmail = "PARENT4@GMAIL.COM",
                            NormalizedUserName = "PARENT4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPiu1lOKIIQbU8iN+cwEtXWdVN9Q3L6bjYtlhsGzVLGo0RdMBLsCwO1OF4EaqDr8Rw==",
                            PhoneNumber = "0865789488",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1f048b8-4993-4c79-b808-a27b07760e8e",
                            TwoFactorEnabled = false,
                            UserName = "parent4@gmail.com"
                        },
                        new
                        {
                            Id = "7e124ab7-6050-49d8-853f-e51897ff536f",
                            AccessFailedCount = 0,
                            Address = "ул. 'Георги Бенковски' 25",
                            CityId = 4,
                            ConcurrencyStamp = "e015f984-9851-4ee1-97dc-1ff7be1a4213",
                            Email = "parent5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Даниела",
                            LastName = "Петкова",
                            LockoutEnabled = false,
                            MiddleName = "Сергеева",
                            NormalizedEmail = "PARENT5@GMAIL.COM",
                            NormalizedUserName = "PARENT5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPBsLhzYfGsOApdOOyCD1u9rJ+AUxUTD0ashf5brfUgfehSMJadEvEDmDop7tj841Q==",
                            PhoneNumber = "0813528746",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1012c30b-3fe2-4666-8939-3e79aa2c2d34",
                            TwoFactorEnabled = false,
                            UserName = "parent5@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Child", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Course", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.CourseType", "CourseType")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeGroup");

                    b.Navigation("CourseType");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.CourseRequest", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.Child", "Child")
                        .WithMany("CourseRequests")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("CourseRequests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Parent", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.TeacherCourse", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("TeachersCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.TeacherSpecialty", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("TeacherSpecialties")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.User", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Child", b =>
                {
                    b.Navigation("CourseRequests");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Course", b =>
                {
                    b.Navigation("CourseRequests");

                    b.Navigation("TeachersCourse");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.CourseType", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Parent", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("TeacherCourses");

                    b.Navigation("TeacherSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
