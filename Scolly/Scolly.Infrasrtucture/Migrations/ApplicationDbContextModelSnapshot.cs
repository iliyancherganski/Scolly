// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scolly.Infrastructures.Data;

#nullable disable

namespace Scolly.Infrasrtucture.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.AgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AgeGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "5 клас"
                        },
                        new
                        {
                            Id = 2,
                            Name = "6 клас"
                        },
                        new
                        {
                            Id = 3,
                            Name = "7 клас"
                        },
                        new
                        {
                            Id = 4,
                            Name = "5-7 клас"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Children");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Иван",
                            LastName = "Петров",
                            ParentId = 1,
                            PhoneNumber = "0895741239"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Валентина",
                            LastName = "Стратева",
                            ParentId = 2,
                            PhoneNumber = "0895741000"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Мария",
                            LastName = "Стратева",
                            ParentId = 2,
                            PhoneNumber = "0895987987"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Ребека",
                            LastName = "Стратева",
                            ParentId = 2,
                            PhoneNumber = "0895987112"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Димитър",
                            LastName = "Кирилов",
                            ParentId = 4,
                            PhoneNumber = "0895965532"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Емил",
                            LastName = "Кирилов",
                            ParentId = 4,
                            PhoneNumber = "0887951146"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Матилда",
                            LastName = "Кирилова",
                            ParentId = 4,
                            PhoneNumber = "0899915858"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Мартина",
                            LastName = "Петкова",
                            ParentId = 5,
                            PhoneNumber = "0899915333"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Петко",
                            LastName = "Петков",
                            ParentId = 5,
                            PhoneNumber = "0897332255"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Бургас"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Варна"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Велико Търново"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Русе"
                        },
                        new
                        {
                            Id = 6,
                            Name = "София"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Стара Загора"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Благоевград"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Пазарджик"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Плевен"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Хасково"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Сливен"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Шумен"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Добрич"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Кърджали"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Враца"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Монтана"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ловеч"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Перник"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Ямбол"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Кюстендил"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Търговище"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Разград"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Силистра"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Габрово"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Смолян"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Видин"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroupId = 1,
                            CourseTypeId = 2,
                            EmployeeId = 1,
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 200m,
                            StartDate = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AgeGroupId = 1,
                            CourseTypeId = 2,
                            EmployeeId = 1,
                            EndDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 250m,
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AgeGroupId = 4,
                            CourseTypeId = 5,
                            EmployeeId = 2,
                            EndDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 630m,
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AgeGroupId = 1,
                            CourseTypeId = 6,
                            EmployeeId = 3,
                            EndDate = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 590m,
                            StartDate = new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AgeGroupId = 3,
                            CourseTypeId = 3,
                            EmployeeId = 3,
                            EndDate = new DateTime(2024, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 990m,
                            StartDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.CourseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChildId = 1,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ChildId = 2,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            ChildId = 3,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            ChildId = 4,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            ChildId = 2,
                            CourseId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            ChildId = 5,
                            CourseId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            ChildId = 5,
                            CourseId = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = 8,
                            ChildId = 5,
                            CourseId = 4,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.CourseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Български език и литература"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Програмиране със C#"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Английски език"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Немски език"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Френски език"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "9789ec17-8fe9-47c2-9577-a2e86ebc85ea"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "1d5a3070-fc27-4172-ad7c-8ef84fb88f7f"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "0ab7ca6b-8108-4b96-a300-f998e93c1b83"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "f8ea9f65-046d-47ea-86c6-9e3c7b6b7d2c"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "e174d710-f687-4a09-876c-4a8690d393e5"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "80cae098-d8ab-42e2-bec2-0bb11d0a441e"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "b79f3723-9600-499a-b640-a368f7816b47"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "7e124ab7-6050-49d8-853f-e51897ff536f"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Информатика"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Български език и литература"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Английски език"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Немски език"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Испански език"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Руски език"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Френски език"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "4560faa9-53cd-4adc-8d65-4f7662cd30a7"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "56b171cf-06d6-4943-97d1-63b5d914a348"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "42949812-d05e-46a5-8de6-cb3520319734"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "3d522657-3ef9-4118-9b07-e5cd9bfb8614"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "ca1ee9ab-8832-464f-a197-7e64d8a4e8af"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.TeacherCourse", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TeachersCourses");

                    b.HasData(
                        new
                        {
                            TeacherId = 3,
                            CourseId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            CourseId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            CourseId = 3
                        },
                        new
                        {
                            TeacherId = 5,
                            CourseId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            CourseId = 4
                        },
                        new
                        {
                            TeacherId = 1,
                            CourseId = 5
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.TeacherSpecialty", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("TeachersSpecialties");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            SpecialtyId = 1
                        },
                        new
                        {
                            TeacherId = 1,
                            SpecialtyId = 2
                        },
                        new
                        {
                            TeacherId = 2,
                            SpecialtyId = 4
                        },
                        new
                        {
                            TeacherId = 2,
                            SpecialtyId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            SpecialtyId = 3
                        },
                        new
                        {
                            TeacherId = 3,
                            SpecialtyId = 5
                        },
                        new
                        {
                            TeacherId = 4,
                            SpecialtyId = 6
                        },
                        new
                        {
                            TeacherId = 4,
                            SpecialtyId = 8
                        },
                        new
                        {
                            TeacherId = 5,
                            SpecialtyId = 5
                        },
                        new
                        {
                            TeacherId = 5,
                            SpecialtyId = 6
                        },
                        new
                        {
                            TeacherId = 5,
                            SpecialtyId = 7
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aab83f21-bfce-46dc-b9b5-3fd6dd1d17f0",
                            AccessFailedCount = 0,
                            Address = "Необособен",
                            CityId = 1,
                            ConcurrencyStamp = "3d7fa0cc-aceb-484b-8b1b-d109a8e2254c",
                            Email = "admin@admin.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            MiddleName = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEHwJxQEJqfYWBwjYrqEF6gNDuEtxt2xq5Ova7Lcwoz2OsXLTa0pRP3vlTnM61dQ0Nw==",
                            PhoneNumber = "0812345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42f32251-d226-48b4-ad62-2f77b634a360",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "4560faa9-53cd-4adc-8d65-4f7662cd30a7",
                            AccessFailedCount = 0,
                            Address = "ул. 'Никола Габровски' 15А",
                            CityId = 3,
                            ConcurrencyStamp = "7df0b861-078e-413e-8e7e-39ee3b6b655a",
                            Email = "teacher1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Николай",
                            LastName = "Николов",
                            LockoutEnabled = false,
                            MiddleName = "Иванов",
                            PasswordHash = "AQAAAAIAAYagAAAAELyHgIyrMqET9KRgwXSp1VjWeYra7rEkW665oWhBubejZFSpTs/Js3rY9+CrlWgv+Q==",
                            PhoneNumber = "0884672591",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "903056fd-d160-4df4-9fae-ff5ecb0a29a6",
                            TwoFactorEnabled = false,
                            UserName = "teacher1@gmail.com"
                        },
                        new
                        {
                            Id = "56b171cf-06d6-4943-97d1-63b5d914a348",
                            AccessFailedCount = 0,
                            Address = "ул. 'Стоян Коледаров' 6",
                            CityId = 2,
                            ConcurrencyStamp = "cf097074-fdd6-4682-bd52-522d76c45df8",
                            Email = "teacher2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Преслав",
                            LastName = "Калоянов",
                            LockoutEnabled = false,
                            MiddleName = "Николаев",
                            PasswordHash = "AQAAAAIAAYagAAAAEKWq6Jkbfri29IVclJIlRlmDlQJaxopQo/HYtZRFP/HwzR81P8RhGYVmX1VWSqWL0g==",
                            PhoneNumber = "0888967530",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fbcc65c-82a9-4fd9-998a-d5c3cab0ca80",
                            TwoFactorEnabled = false,
                            UserName = "teacher2@gmail.com"
                        },
                        new
                        {
                            Id = "42949812-d05e-46a5-8de6-cb3520319734",
                            AccessFailedCount = 0,
                            Address = "ул. 'Мусала' 12",
                            CityId = 2,
                            ConcurrencyStamp = "11812e33-53e4-4da3-af38-02ad97097e71",
                            Email = "teacher3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Мария",
                            LastName = "Димитрова",
                            LockoutEnabled = false,
                            MiddleName = "Атанасова",
                            PasswordHash = "AQAAAAIAAYagAAAAEIvbUgsc2SYqa2iAB+cUPLqll6vvVZBsg7C/JxBdhYL/HtEWjJkURrkKVZelweleEw==",
                            PhoneNumber = "0899745867",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee224a61-6d6b-45bb-9a85-6d4ece401ef3",
                            TwoFactorEnabled = false,
                            UserName = "teacher3@gmail.com"
                        },
                        new
                        {
                            Id = "3d522657-3ef9-4118-9b07-e5cd9bfb8614",
                            AccessFailedCount = 0,
                            Address = "ул. 'Васил Левски' 155А",
                            CityId = 4,
                            ConcurrencyStamp = "793ed8b0-beef-4f18-8475-dbaaba407b2b",
                            Email = "teacher4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Виктор",
                            LastName = "Стефанов",
                            LockoutEnabled = false,
                            MiddleName = "Петров",
                            PasswordHash = "AQAAAAIAAYagAAAAEJlvI5iHHACVGQqVZZTaNbNQsC1CEFtm1fQYv3o6h5xGEGvzNBaVsfkccyeFpexsiw==",
                            PhoneNumber = "0899745997",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6a8029a-4795-4f4b-bbdd-001e5c71b7e6",
                            TwoFactorEnabled = false,
                            UserName = "teacher4@gmail.com"
                        },
                        new
                        {
                            Id = "ca1ee9ab-8832-464f-a197-7e64d8a4e8af",
                            AccessFailedCount = 0,
                            Address = "ул. 'Александър Малинов' 33",
                            CityId = 5,
                            ConcurrencyStamp = "c2622baf-f8f4-4069-8889-849f1c7097ec",
                            Email = "teacher5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Емил",
                            LastName = "Долчинков",
                            LockoutEnabled = false,
                            MiddleName = "Давидов",
                            PasswordHash = "AQAAAAIAAYagAAAAEEhDrCmOXS7OUEQ4OxpJ4/LZ/MHRVVDNc+/q1wB73UIHatOwUXX9PvYtgEVdptJVgQ==",
                            PhoneNumber = "0899745000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea5c4eb8-fe90-4ffb-b399-ced967f84709",
                            TwoFactorEnabled = false,
                            UserName = "teacher5@gmail.com"
                        },
                        new
                        {
                            Id = "9789ec17-8fe9-47c2-9577-a2e86ebc85ea",
                            AccessFailedCount = 0,
                            Address = "ул. 'Петко Р. Славейков' 4Б",
                            CityId = 1,
                            ConcurrencyStamp = "3b5c5a92-9ff8-4c41-be95-0b559f6f7879",
                            Email = "employee1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Димитър",
                            LastName = "Иванов",
                            LockoutEnabled = false,
                            MiddleName = "Спасов",
                            PasswordHash = "AQAAAAIAAYagAAAAEBE4Dp4PrcinX26ZrlFFtqwTidBP0Z6LKF0UrHwGciUKoXNEO27to2PS0M4Qhe/TEA==",
                            PhoneNumber = "0823167589",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d93c421-c0a7-4dd3-a295-e374ba275aab",
                            TwoFactorEnabled = false,
                            UserName = "employee1@gmail.com"
                        },
                        new
                        {
                            Id = "1d5a3070-fc27-4172-ad7c-8ef84fb88f7f",
                            AccessFailedCount = 0,
                            Address = "ул. 'Плиска' 22",
                            CityId = 6,
                            ConcurrencyStamp = "b0b0fd31-1a1d-4a9b-b507-4c4c6a6fac83",
                            Email = "employee2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Алиса",
                            LastName = "Нешева",
                            LockoutEnabled = false,
                            MiddleName = "Емилиянова",
                            PasswordHash = "AQAAAAIAAYagAAAAEJNqRFrIcBH4Z3rp4QcIFR1j8jpq2iyVnBg3IGEK0xaVpItsr9jK8ZcNRnWMxxc4Mg==",
                            PhoneNumber = "0877512844",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18d30ff6-8801-471b-b6a4-75b0ede61bcf",
                            TwoFactorEnabled = false,
                            UserName = "employee2@gmail.com"
                        },
                        new
                        {
                            Id = "0ab7ca6b-8108-4b96-a300-f998e93c1b83",
                            AccessFailedCount = 0,
                            Address = "ул. 'Преслав' 10",
                            CityId = 4,
                            ConcurrencyStamp = "90a1f7f1-e781-4a7a-b7b0-9a5c3b44a9f9",
                            Email = "employee3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Петър",
                            LastName = "Нешев",
                            LockoutEnabled = false,
                            MiddleName = "Валентинов",
                            PasswordHash = "AQAAAAIAAYagAAAAEDUe52jaFJrRBRKRsysyU2GfWEq9kEOjItU2eUvTsu4R5LgtJDDRmIXOMZVcDxDF+w==",
                            PhoneNumber = "0877512889",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2efd5431-8506-4fca-9878-ecf0c4d6ddba",
                            TwoFactorEnabled = false,
                            UserName = "employee3@gmail.com"
                        },
                        new
                        {
                            Id = "f8ea9f65-046d-47ea-86c6-9e3c7b6b7d2c",
                            AccessFailedCount = 0,
                            Address = "ул. 'Опълченска' 3А",
                            CityId = 3,
                            ConcurrencyStamp = "ae0e1daa-3ab3-47b7-9dd8-ea597af7852d",
                            Email = "parent1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Петър",
                            LastName = "Петров",
                            LockoutEnabled = false,
                            MiddleName = "Иванов",
                            PasswordHash = "AQAAAAIAAYagAAAAECDe8m0ZJIM1dPq7gML7H4pexCdxwMpf9D9dRLVoO44MRHKSOMNwblGzzSOeAoeTZg==",
                            PhoneNumber = "0859989615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1ff9cca-a0f1-42ed-93f7-0071ab38574b",
                            TwoFactorEnabled = false,
                            UserName = "parent1@gmail.com"
                        },
                        new
                        {
                            Id = "e174d710-f687-4a09-876c-4a8690d393e5",
                            AccessFailedCount = 0,
                            Address = "ул. 'Стоян Коледаров' 3А",
                            CityId = 1,
                            ConcurrencyStamp = "5aa003f2-c399-4f70-8ee2-91b64d8b188d",
                            Email = "parent2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Александър",
                            LastName = "Стратиев",
                            LockoutEnabled = false,
                            MiddleName = "Иванов",
                            PasswordHash = "AQAAAAIAAYagAAAAEDDt264ljm7PXWX8Kk4TLbqCz2TcztYS8NCcea/DEsEc2L2QDUaMiXVnW6/yVReMkg==",
                            PhoneNumber = "0854700615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45040c90-d0f0-48c9-8e28-8502fe70d118",
                            TwoFactorEnabled = false,
                            UserName = "parent2@gmail.com"
                        },
                        new
                        {
                            Id = "80cae098-d8ab-42e2-bec2-0bb11d0a441e",
                            AccessFailedCount = 0,
                            Address = "ул. 'Петя Дубарова' 16Б",
                            CityId = 6,
                            ConcurrencyStamp = "3ca63edd-e434-4d26-820b-a74018828b0c",
                            Email = "parent3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Виктория",
                            LastName = "Ангелова",
                            LockoutEnabled = false,
                            MiddleName = "Николаева",
                            PasswordHash = "AQAAAAIAAYagAAAAEE6r1hBrpuRNFZMzV2nVtV+QuVXqnZQJ0MlNbC2I4hVi29ya+IbD28qCf9EnroqO9w==",
                            PhoneNumber = "0854789615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7887f6d7-0d06-4d30-9d2d-14b45ef4ff77",
                            TwoFactorEnabled = false,
                            UserName = "parent3@gmail.com"
                        },
                        new
                        {
                            Id = "b79f3723-9600-499a-b640-a368f7816b47",
                            AccessFailedCount = 0,
                            Address = "ул. 'Освобождение' 3Б",
                            CityId = 4,
                            ConcurrencyStamp = "45479299-0cd1-4e68-bca4-c89bc55a2f53",
                            Email = "parent4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Девора",
                            LastName = "Кирилова",
                            LockoutEnabled = false,
                            MiddleName = "Кирилова",
                            PasswordHash = "AQAAAAIAAYagAAAAEEQvHYPMblghgpXIAbcDMqUNlvy+zH8iaBT3E4iIVvY5wjEM5ghGuQ74gw4yv2qBRw==",
                            PhoneNumber = "0865789488",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c12e4d11-5862-4666-b1b4-18042d8c53be",
                            TwoFactorEnabled = false,
                            UserName = "parent4@gmail.com"
                        },
                        new
                        {
                            Id = "7e124ab7-6050-49d8-853f-e51897ff536f",
                            AccessFailedCount = 0,
                            Address = "ул. 'Георги Бенковски' 25",
                            CityId = 4,
                            ConcurrencyStamp = "893afaf3-eef7-4981-b921-7dc84307bba4",
                            Email = "parent5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Даниела",
                            LastName = "Петкова",
                            LockoutEnabled = false,
                            MiddleName = "Сергеева",
                            PasswordHash = "AQAAAAIAAYagAAAAEN3JOx2GCjqilhdzWisWNSOLo2ZuWjvcUVMQcX4RQTTmWYFeCthHSRd39fUrZHVFUw==",
                            PhoneNumber = "0813528746",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0fa1290-654e-49db-9ace-cd1672925199",
                            TwoFactorEnabled = false,
                            UserName = "parent5@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructures.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Child", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Course", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructures.Data.Models.CourseType", "CourseType")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructures.Data.Models.Employee", "Employee")
                        .WithMany("Courses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeGroup");

                    b.Navigation("CourseType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.CourseRequest", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.Child", "Child")
                        .WithMany("CourseRequests")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructures.Data.Models.Course", "Course")
                        .WithMany("CourseRequests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Employee", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Parent", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Teacher", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.TeacherCourse", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.Course", "Course")
                        .WithMany("TeachersCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructures.Data.Models.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.TeacherSpecialty", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.Specialty", "Specialty")
                        .WithMany("TeachersSpecialty")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructures.Data.Models.Teacher", "Teacher")
                        .WithMany("TeacherSpecialties")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.User", b =>
                {
                    b.HasOne("Scolly.Infrastructures.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Child", b =>
                {
                    b.Navigation("CourseRequests");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Course", b =>
                {
                    b.Navigation("CourseRequests");

                    b.Navigation("TeachersCourse");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.CourseType", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Employee", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Parent", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Specialty", b =>
                {
                    b.Navigation("TeachersSpecialty");
                });

            modelBuilder.Entity("Scolly.Infrastructures.Data.Models.Teacher", b =>
                {
                    b.Navigation("TeacherCourses");

                    b.Navigation("TeacherSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
