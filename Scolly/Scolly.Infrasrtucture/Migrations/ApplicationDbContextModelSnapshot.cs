// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scolly.Infrastructure.Data;

#nullable disable

namespace Scolly.Infrasrtucture.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.AgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AgeGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "5 клас"
                        },
                        new
                        {
                            Id = 2,
                            Name = "6 клас"
                        },
                        new
                        {
                            Id = 3,
                            Name = "7 клас"
                        },
                        new
                        {
                            Id = 4,
                            Name = "5-7 клас"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Children");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Иван",
                            LastName = "Петров",
                            ParentId = 1,
                            PhoneNumber = "0895741239"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Валентина",
                            LastName = "Стратева",
                            ParentId = 2,
                            PhoneNumber = "0895741000"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Мария",
                            LastName = "Стратева",
                            ParentId = 2,
                            PhoneNumber = "0895987987"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Ребека",
                            LastName = "Стратева",
                            ParentId = 2,
                            PhoneNumber = "0895987112"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Димитър",
                            LastName = "Кирилов",
                            ParentId = 4,
                            PhoneNumber = "0895965532"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Емил",
                            LastName = "Кирилов",
                            ParentId = 4,
                            PhoneNumber = "0887951146"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Матилда",
                            LastName = "Кирилова",
                            ParentId = 4,
                            PhoneNumber = "0899915858"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Мартина",
                            LastName = "Петкова",
                            ParentId = 5,
                            PhoneNumber = "0899915333"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Петко",
                            LastName = "Петков",
                            ParentId = 5,
                            PhoneNumber = "0897332255"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Бургас"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Варна"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Велико Търново"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Русе"
                        },
                        new
                        {
                            Id = 6,
                            Name = "София"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Стара Загора"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Благоевград"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Пазарджик"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Плевен"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Хасково"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Сливен"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Шумен"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Добрич"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Кърджали"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Враца"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Монтана"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ловеч"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Перник"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Ямбол"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Кюстендил"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Търговище"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Разград"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Силистра"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Габрово"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Смолян"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Видин"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("CourseTypeId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroupId = 1,
                            CourseTypeId = 2,
                            Description = "Курс по български език и литература за ученици от 5 клас, насочен към подобряване на граматиката и аналитичните умения.",
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 200m,
                            StartDate = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AgeGroupId = 1,
                            CourseTypeId = 2,
                            Description = "Задълбочен курс по български език и литература за 5 клас, с акцент върху подготовката за национални изпити.",
                            EndDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 250m,
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AgeGroupId = 4,
                            CourseTypeId = 5,
                            Description = "Интензивен курс по немски език за ученици от 5 до 7 клас, включващ говорене, слушане и писане.",
                            EndDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 630m,
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AgeGroupId = 1,
                            CourseTypeId = 6,
                            Description = "Курс по френски език за начинаещи ученици от 5 клас, съсредоточен върху основните езикови умения.",
                            EndDate = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 590m,
                            StartDate = new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AgeGroupId = 3,
                            CourseTypeId = 3,
                            Description = "Практически курс по програмиране със C# за ученици от 7 клас, включващ основи на програмирането и реални проекти.",
                            EndDate = new DateTime(2024, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 990m,
                            StartDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.CourseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChildId = 1,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ChildId = 2,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            ChildId = 3,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            ChildId = 4,
                            CourseId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            ChildId = 2,
                            CourseId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            ChildId = 5,
                            CourseId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            ChildId = 5,
                            CourseId = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = 8,
                            ChildId = 5,
                            CourseId = 4,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.CourseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Български език и литература"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Програмиране със C#"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Английски език"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Немски език"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Френски език"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "f8ea9f65-046d-47ea-86c6-9e3c7b6b7d2c"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "e174d710-f687-4a09-876c-4a8690d393e5"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "80cae098-d8ab-42e2-bec2-0bb11d0a441e"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "b79f3723-9600-499a-b640-a368f7816b47"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "7e124ab7-6050-49d8-853f-e51897ff536f"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Информатика"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Български език и литература"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Английски език"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Немски език"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Испански език"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Руски език"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Френски език"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "4560faa9-53cd-4adc-8d65-4f7662cd30a7"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "56b171cf-06d6-4943-97d1-63b5d914a348"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "42949812-d05e-46a5-8de6-cb3520319734"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "3d522657-3ef9-4118-9b07-e5cd9bfb8614"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "ca1ee9ab-8832-464f-a197-7e64d8a4e8af"
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.TeacherCourse", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TeachersCourses");

                    b.HasData(
                        new
                        {
                            TeacherId = 3,
                            CourseId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            CourseId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            CourseId = 3
                        },
                        new
                        {
                            TeacherId = 5,
                            CourseId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            CourseId = 4
                        },
                        new
                        {
                            TeacherId = 1,
                            CourseId = 5
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.TeacherSpecialty", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("TeachersSpecialties");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            SpecialtyId = 1
                        },
                        new
                        {
                            TeacherId = 1,
                            SpecialtyId = 2
                        },
                        new
                        {
                            TeacherId = 2,
                            SpecialtyId = 4
                        },
                        new
                        {
                            TeacherId = 2,
                            SpecialtyId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            SpecialtyId = 3
                        },
                        new
                        {
                            TeacherId = 3,
                            SpecialtyId = 5
                        },
                        new
                        {
                            TeacherId = 4,
                            SpecialtyId = 6
                        },
                        new
                        {
                            TeacherId = 4,
                            SpecialtyId = 8
                        },
                        new
                        {
                            TeacherId = 5,
                            SpecialtyId = 5
                        },
                        new
                        {
                            TeacherId = 5,
                            SpecialtyId = 6
                        },
                        new
                        {
                            TeacherId = 5,
                            SpecialtyId = 7
                        });
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aab83f21-bfce-46dc-b9b5-3fd6dd1d17f0",
                            AccessFailedCount = 0,
                            Address = "Необособен",
                            CityId = 1,
                            ConcurrencyStamp = "791a205a-3ca7-4156-a7cb-ccf5a7602e6b",
                            Email = "admin@admin.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            MiddleName = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECH4Hk8jxcx4yzyftLGi6LWYGS2EvaS/iLxInK9CNDIjXFRoZZY7yBHw56dlZRyLrA==",
                            PhoneNumber = "0812345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97c3c327-5a0b-4082-a2fb-806eab196f45",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "4560faa9-53cd-4adc-8d65-4f7662cd30a7",
                            AccessFailedCount = 0,
                            Address = "ул. 'Никола Габровски' 15А",
                            CityId = 3,
                            ConcurrencyStamp = "61e04a7d-2a00-4ec8-a157-28cda6db4a57",
                            Email = "teacher1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Николай",
                            LastName = "Николов",
                            LockoutEnabled = false,
                            MiddleName = "Иванов",
                            NormalizedEmail = "TEACHER1@GMAIL.COM",
                            NormalizedUserName = "TEACHER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJcWoKZxzvwcLTP0GLRJjtbSPBsGTcLp19z8T6+gd2dZmmCyR8qmEZqRCbmfjuoyoA==",
                            PhoneNumber = "0884672591",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9503bdbe-fa74-44bf-9e79-28d6b36b9fe8",
                            TwoFactorEnabled = false,
                            UserName = "teacher1@gmail.com"
                        },
                        new
                        {
                            Id = "56b171cf-06d6-4943-97d1-63b5d914a348",
                            AccessFailedCount = 0,
                            Address = "ул. 'Стоян Коледаров' 6",
                            CityId = 2,
                            ConcurrencyStamp = "51f6fd07-9152-49cb-9ed6-2295d60b6f97",
                            Email = "teacher2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Преслав",
                            LastName = "Калоянов",
                            LockoutEnabled = false,
                            MiddleName = "Николаев",
                            NormalizedEmail = "TEACHER2@GMAIL.COM",
                            NormalizedUserName = "TEACHER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI4FfpBVWzwzaZmnfEf+/+xUDBZWkpNkT7hS6d9pEXBm7uySMfne+OtAOAkcwvHwxA==",
                            PhoneNumber = "0888967530",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a811705-5478-4a7d-b1ed-7869650ca13b",
                            TwoFactorEnabled = false,
                            UserName = "teacher2@gmail.com"
                        },
                        new
                        {
                            Id = "42949812-d05e-46a5-8de6-cb3520319734",
                            AccessFailedCount = 0,
                            Address = "ул. 'Мусала' 12",
                            CityId = 2,
                            ConcurrencyStamp = "2979670a-786f-4fbb-ae0f-d90a89a3e10b",
                            Email = "teacher3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Мария",
                            LastName = "Димитрова",
                            LockoutEnabled = false,
                            MiddleName = "Атанасова",
                            NormalizedEmail = "TEACHER3@GMAIL.COM",
                            NormalizedUserName = "TEACHER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHTqhJupUN+XeMUGHBq46EXlvSqQcuxH+k2dYoV4lAK888r3bswPuShkUEcC1TNzYw==",
                            PhoneNumber = "0899745867",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac92daf5-44cc-463e-9345-6d0fc012849e",
                            TwoFactorEnabled = false,
                            UserName = "teacher3@gmail.com"
                        },
                        new
                        {
                            Id = "3d522657-3ef9-4118-9b07-e5cd9bfb8614",
                            AccessFailedCount = 0,
                            Address = "ул. 'Васил Левски' 155А",
                            CityId = 4,
                            ConcurrencyStamp = "41f5ed4d-d2d8-4f69-9857-815f834d9709",
                            Email = "teacher4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Виктор",
                            LastName = "Стефанов",
                            LockoutEnabled = false,
                            MiddleName = "Петров",
                            NormalizedEmail = "TEACHER4@GMAIL.COM",
                            NormalizedUserName = "TEACHER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJyZf1ou0E164agbGsNDplWG69vm0lwyeKyb+u99yKjxJqE3VK38Z5z/FX4ug4ynkg==",
                            PhoneNumber = "0899745997",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a04e254-05d2-40df-9c2b-f18a59210ef5",
                            TwoFactorEnabled = false,
                            UserName = "teacher4@gmail.com"
                        },
                        new
                        {
                            Id = "ca1ee9ab-8832-464f-a197-7e64d8a4e8af",
                            AccessFailedCount = 0,
                            Address = "ул. 'Александър Малинов' 33",
                            CityId = 5,
                            ConcurrencyStamp = "cf285580-0c1d-42be-b974-dcc00f336d27",
                            Email = "teacher5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Емил",
                            LastName = "Долчинков",
                            LockoutEnabled = false,
                            MiddleName = "Давидов",
                            NormalizedEmail = "TEACHER5@GMAIL.COM",
                            NormalizedUserName = "TEACHER5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG+e43y900M0zk0v3XiP2QL3sFz1jceJN+dfLcVgRg9n3FFv4/4rtez/8fZhjoZmMQ==",
                            PhoneNumber = "0899745000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1918373-aca8-4fb8-a4c0-6df5ea5c4e31",
                            TwoFactorEnabled = false,
                            UserName = "teacher5@gmail.com"
                        },
                        new
                        {
                            Id = "f8ea9f65-046d-47ea-86c6-9e3c7b6b7d2c",
                            AccessFailedCount = 0,
                            Address = "ул. 'Опълченска' 3А",
                            CityId = 3,
                            ConcurrencyStamp = "b1ec09c2-ab0a-422a-886e-ef31d8f967ff",
                            Email = "parent1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Петър",
                            LastName = "Петров",
                            LockoutEnabled = false,
                            MiddleName = "Иванов",
                            NormalizedEmail = "PARENT1@GMAIL.COM",
                            NormalizedUserName = "PARENT1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIzUpIYS4lYlHEHBVCQ+yNOW3f1a4Nnab9T8UWEJUMxnL5S/BpnZsyDsAWE+BVHAOg==",
                            PhoneNumber = "0859989615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a8fa5f5-0274-49f5-8db6-030db80b821a",
                            TwoFactorEnabled = false,
                            UserName = "parent1@gmail.com"
                        },
                        new
                        {
                            Id = "e174d710-f687-4a09-876c-4a8690d393e5",
                            AccessFailedCount = 0,
                            Address = "ул. 'Стоян Коледаров' 3А",
                            CityId = 1,
                            ConcurrencyStamp = "055caa41-c834-480c-8a9e-eb480e470d9a",
                            Email = "parent2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Александър",
                            LastName = "Стратиев",
                            LockoutEnabled = false,
                            MiddleName = "Иванов",
                            NormalizedEmail = "PARENT2@GMAIL.COM",
                            NormalizedUserName = "PARENT2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO57dd4fZcIwdDFtF620mxRc9gmBIRYT4UWIFZ//kxpz13YXKxiN7X/yeoT/JD/N4Q==",
                            PhoneNumber = "0854700615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8d33b5f-71fb-412c-9dff-fc4c3f6615d1",
                            TwoFactorEnabled = false,
                            UserName = "parent2@gmail.com"
                        },
                        new
                        {
                            Id = "80cae098-d8ab-42e2-bec2-0bb11d0a441e",
                            AccessFailedCount = 0,
                            Address = "ул. 'Петя Дубарова' 16Б",
                            CityId = 6,
                            ConcurrencyStamp = "6fe423eb-c560-48f0-ac6b-7a62334db61c",
                            Email = "parent3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Виктория",
                            LastName = "Ангелова",
                            LockoutEnabled = false,
                            MiddleName = "Николаева",
                            NormalizedEmail = "PARENT3@GMAIL.COM",
                            NormalizedUserName = "PARENT3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOTpUMahO9ncVzFOtmAlbW6j615m2Gu90jmgP93CR1IJUNEv0d0/UyiVG7vGogKZTg==",
                            PhoneNumber = "0854789615",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4564128-8626-4d5c-ac02-c2b016fa3b6f",
                            TwoFactorEnabled = false,
                            UserName = "parent3@gmail.com"
                        },
                        new
                        {
                            Id = "b79f3723-9600-499a-b640-a368f7816b47",
                            AccessFailedCount = 0,
                            Address = "ул. 'Освобождение' 3Б",
                            CityId = 4,
                            ConcurrencyStamp = "c63e78df-0edd-4fa9-9053-c7ea3bf2a220",
                            Email = "parent4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Девора",
                            LastName = "Кирилова",
                            LockoutEnabled = false,
                            MiddleName = "Кирилова",
                            NormalizedEmail = "PARENT4@GMAIL.COM",
                            NormalizedUserName = "PARENT4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG4r1X2pc9wKicXdLspAMa4LeCoanelnOuSbLJ2Q1pPAL+SudAzYSKQG1J3zyFUHvQ==",
                            PhoneNumber = "0865789488",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7449628-4736-4d01-91c8-3a5b70e57d70",
                            TwoFactorEnabled = false,
                            UserName = "parent4@gmail.com"
                        },
                        new
                        {
                            Id = "7e124ab7-6050-49d8-853f-e51897ff536f",
                            AccessFailedCount = 0,
                            Address = "ул. 'Георги Бенковски' 25",
                            CityId = 4,
                            ConcurrencyStamp = "a3de3569-1e53-40a0-8b34-07ed1555b97e",
                            Email = "parent5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Даниела",
                            LastName = "Петкова",
                            LockoutEnabled = false,
                            MiddleName = "Сергеева",
                            NormalizedEmail = "PARENT5@GMAIL.COM",
                            NormalizedUserName = "PARENT5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENwdxLw2KJ3qUgxu1MBw9oYQjFD1PZcQCiqEwNYsAJhU00D9C+3rQz6E0NkrQsaJ9w==",
                            PhoneNumber = "0813528746",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e105f7f-d566-4505-a956-a9b3e769fcfb",
                            TwoFactorEnabled = false,
                            UserName = "parent5@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Child", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Course", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.CourseType", "CourseType")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeGroup");

                    b.Navigation("CourseType");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.CourseRequest", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.Child", "Child")
                        .WithMany("CourseRequests")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("CourseRequests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Parent", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.TeacherCourse", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("TeachersCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.TeacherSpecialty", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.Specialty", "Specialty")
                        .WithMany("TeachersSpecialty")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scolly.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("TeacherSpecialties")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.User", b =>
                {
                    b.HasOne("Scolly.Infrastructure.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Child", b =>
                {
                    b.Navigation("CourseRequests");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Course", b =>
                {
                    b.Navigation("CourseRequests");

                    b.Navigation("TeachersCourse");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.CourseType", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Parent", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Navigation("TeachersSpecialty");
                });

            modelBuilder.Entity("Scolly.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("TeacherCourses");

                    b.Navigation("TeacherSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
